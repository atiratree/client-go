// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	"k8s.io/client-go/rest"

	v1 "github.com/openshift/api/authorization/v1"
	scheme "github.com/openshift/client-go/authorization/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// SubjectRulesReviewsGetter has a method to return a SubjectRulesReviewInterface.
// A group's client should implement this interface.
type SubjectRulesReviewsGetter interface {
	SubjectRulesReviews(namespace string) SubjectRulesReviewInterface
}

// SubjectRulesReviewInterface has methods to work with SubjectRulesReview resources.
type SubjectRulesReviewInterface interface {
	Create(ctx context.Context, subjectRulesReview *v1.SubjectRulesReview, opts metav1.CreateOptions) (*v1.SubjectRulesReview, error)
	SubjectRulesReviewExpansion
}

// subjectRulesReviews implements SubjectRulesReviewInterface
type subjectRulesReviews struct {
	rest.Interface
	namespace string
}

// newSubjectRulesReviews returns a SubjectRulesReviews
func newSubjectRulesReviews(c *AuthorizationV1Client, namespace string) *subjectRulesReviews {
	return &subjectRulesReviews{c.RESTClient(), namespace}
}

// Create takes the representation of a subjectRulesReview and creates it.  Returns the server's representation of the subjectRulesReview, and an error, if there is any.
func (c *subjectRulesReviews) Create(ctx context.Context, subjectRulesReview *v1.SubjectRulesReview, opts metav1.CreateOptions) (result *v1.SubjectRulesReview, err error) {
	result = &v1.SubjectRulesReview{}
	err = c.Interface.Post().
		Namespace(c.namespace).
		Resource("subjectrulesreviews").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(subjectRulesReview).
		Do(ctx).
		Into(result)
	return
}
